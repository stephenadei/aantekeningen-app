// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Teacher {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         String   @default("admin") // admin, staff
  otpSecret    String?  // TOTP secret for 2FA
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  loginAudits  LoginAudit[]
  
  @@map("teachers")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@map("sessions")
}

model Student {
  id           String   @id @default(cuid())
  displayName  String   @unique
  pinHash      String
  pinUpdatedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Google Drive folder linking
  driveFolderId    String?  @unique  // Google Drive folder ID
  driveFolderName  String?            // Original folder name
  subject          String?            // HBO/Universiteit, Middelbareschool, MBO
  folderConfirmed  Boolean @default(false)  // Has teacher confirmed this link?
  folderLinkedAt   DateTime?         // When was folder first linked
  folderConfirmedAt DateTime?        // When was link confirmed
  
  // Relations
  notes        Note[]
  tags         StudentTag[]
  loginAudits  LoginAudit[]
  
  @@map("students")
}

model Note {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  contentMd  String
  subject    String   // "wiskunde-a", "statistiek", etc.
  level      String   // "havo-4", "vmbo-bk-3", etc.
  topic      String   // "breuken", "logaritmen", etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Optional: Google Drive file reference
  driveFileId String?
  driveFileName String?
  
  // AI analysis tracking
  aiGenerated     Boolean @default(true)   // Was this AI generated?
  aiConfirmed     Boolean @default(false)  // Has teacher confirmed AI data?
  manuallyEdited  Boolean @default(false)  // Has teacher edited this?
  
  @@map("notes")
}

model StudentTag {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  key       String  // "subject" | "level" | "topic"
  value     String  // normalized slug value
  
  @@unique([studentId, key, value])
  @@index([key, value])
  @@map("student_tags")
}

model UnlinkedFolder {
  id              String   @id @default(cuid())
  driveFolderId   String   @unique
  folderName      String
  subject         String   // HBO/Universiteit, Middelbareschool, MBO
  suggestedStudentId String?  // Auto-matched student
  createdAt       DateTime @default(now())
  
  @@map("unlinked_folders")
}

model LoginAudit {
  id        String   @id @default(cuid())
  who       String   // "teacher:<id>" | "student:<id>"
  action    String   // "login_ok" | "login_fail" | "pin_reset" | "pin_attempt" | "impersonate"
  ip        String?
  userAgent String?
  metadata  Json?    // Additional context (e.g., PIN attempt count)
  createdAt DateTime @default(now())
  
  // Optional relations
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id])
  
  @@index([who, action])
  @@index([createdAt])
  @@map("login_audits")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model KeyConcept {
  id          String   @id @default(cuid())
  driveFileId String
  term        String   // Het belangrijke begrip
  explanation String   // Uitleg/toelichting
  example     String?  // Optioneel voorbeeld
  orderIndex  Int      @default(0)
  isAiGenerated Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([driveFileId])
  @@map("key_concepts")
}

// NextAuth models removed - using custom Session model instead